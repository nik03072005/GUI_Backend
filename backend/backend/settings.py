"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path
from decouple import config


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY', default='django-insecure-&0g%14g(d1fa#j5yx4_@%53lz8&zro!og*e&yk%!qwg6ho-s(4')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=False, cast=bool)

# Port configuration for Render deployment
PORT = int(os.environ.get('PORT', 8000))
print(f"üöÄ Server will run on port: {PORT}")

ALLOWED_HOSTS = []
# Handle Render deployment and local development
ALLOWED_HOSTS = config('ALLOWED_HOSTS', default='localhost,127.0.0.1,testserver').split(',')

# Add Render-specific hosts
RENDER_EXTERNAL_HOSTNAME = config('RENDER_EXTERNAL_HOSTNAME', default=None)
if RENDER_EXTERNAL_HOSTNAME:
    ALLOWED_HOSTS.append(RENDER_EXTERNAL_HOSTNAME)

# Ensure the Render subdomain is allowed
ALLOWED_HOSTS.extend([
    'gui-backend-eab8.onrender.com',
    '*.onrender.com'
])


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'analyzer',
    'corsheaders',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',  # Add WhiteNoise for static files
    'django.middleware.gzip.GZipMiddleware',  # Performance: Enable compression
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]
CORS_ALLOWED_ORIGINS = [
    "https://isro-gui-five.vercel.app",
    "https://isro-frontend-cvc6naquc-nik03072005s-projects.vercel.app",
    "http://localhost:3000",  # for local development
    "http://localhost:5173",  # for Vite dev server
]

# Or allow all Vercel preview deployments
CORS_ALLOW_ALL_ORIGINS = True  # Only for development

# Optional (if using cookies):
CORS_ALLOW_CREDENTIALS = True


ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'

AUTH_USER_MODEL = 'analyzer.CustomUser'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

import dj_database_url

# Try to get DATABASE_URL first (Render/Heroku style)
DATABASE_URL = config('DATABASE_URL', default=None)

# Graceful database configuration with fallbacks
try:
    if DATABASE_URL:
        # Use DATABASE_URL if available (production)
        print(f"üîó Using DATABASE_URL for database connection")
        db_config = dj_database_url.parse(DATABASE_URL, conn_max_age=600, conn_health_checks=True)
        
        # Ensure SSL is properly configured for Render
        db_config['OPTIONS'] = {
            'sslmode': 'require',
            'connect_timeout': 10,
        }
        
        # Add additional connection parameters for stability
        db_config['CONN_MAX_AGE'] = 0  # Disable persistent connections to avoid issues
        
        DATABASES = {'default': db_config}
        print(f"‚úÖ Database configured: {db_config['ENGINE']} at {db_config.get('HOST', 'unknown')}")
    else:
        # Fallback to individual database settings for local development
        print("üîß Using individual database settings for local development")
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.postgresql',
                'NAME': config('DATABASE_NAME', default='isro_backend'),
                'USER': config('DATABASE_USER', default='postgres'),
                'PASSWORD': config('DATABASE_PASSWORD', default=''),
                'HOST': config('DATABASE_HOST', default='localhost'),
                'PORT': config('DATABASE_PORT', default='5432'),
                'CONN_MAX_AGE': 0,  # Disable persistent connections
                'OPTIONS': {
                    'sslmode': 'prefer',
                    'connect_timeout': 10,
                },
            }
        }
except Exception as e:
    print(f"‚ö†Ô∏è  Database configuration error: {e}")
    print("üîÑ Falling back to SQLite for local development")
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }

# Final fallback to SQLite if no PostgreSQL configuration
if not DATABASE_URL and not config('DATABASE_PASSWORD', default=None):
    print("‚ö†Ô∏è  No PostgreSQL configuration found - using SQLite for local development")
    DATABASES['default'] = {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    )
}


AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Additional locations of static files
STATICFILES_DIRS = []

# Only add static dir if it exists
static_dir = BASE_DIR / 'static'
if static_dir.exists():
    STATICFILES_DIRS.append(static_dir)

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# ===============================
# PERFORMANCE OPTIMIZATIONS
# ===============================

# Cache Configuration - Simplified for production compatibility
REDIS_URL = config('REDIS_URL', default=None)

if REDIS_URL:
    # Use Redis if available (production)
    CACHES = {
        'default': {
            'BACKEND': 'django_redis.cache.RedisCache',
            'LOCATION': REDIS_URL,
            'OPTIONS': {
                'CLIENT_CLASS': 'django_redis.client.DefaultClient',
                'IGNORE_EXCEPTIONS': True,  # Graceful fallback on Redis errors
            },
            'TIMEOUT': 300,
            'KEY_PREFIX': 'isro',
        }
    }
else:
    # Fallback to local memory cache
    CACHES = {
        'default': {
            'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
            'LOCATION': 'isro-backend-cache',
            'TIMEOUT': 300,
            'OPTIONS': {
                'MAX_ENTRIES': 1000,
                'CULL_FREQUENCY': 3,
            }
        }
    }

# Security headers for performance
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = 'DENY'

# File upload limits for performance
FILE_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024  # 10MB
DATA_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024  # 10MB

# Session configuration - Use database sessions for reliability
SESSION_ENGINE = 'django.contrib.sessions.backends.db'
SESSION_EXPIRE_AT_BROWSER_CLOSE = True

# Production settings (when deployed)
if not DEBUG:
    # Security in production
    SECURE_SSL_REDIRECT = True
    SECURE_HSTS_SECONDS = 31536000  # 1 year
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    
    # Static files optimization for production
    STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Clean logging configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'clean': {
            'format': '{levelname} {asctime} {name} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'clean'
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
    'loggers': {
        'analyzer': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': False,
        },
    },
}
